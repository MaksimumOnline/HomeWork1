{
	"info": {
		"_postman_id": "8b6d5890-bf2d-4581-ae15-942f667a628d",
		"name": "AutoTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "100",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maks",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"let schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"],\r",
							"\"properties\":{\r",
							"    \"person\":{\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"],\r",
							"    \"properties\": {\r",
							"        \"u_age\": {\"type\": \"integer\"},\r",
							"        \"u_name\": {\"type\": \"array\"},\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"    }\r",
							"    },\r",
							"\"qa_salary_after_12_months\": {\"type\": \"integer\"},\r",
							"\"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"\"start_qa_salary\": {\"type\": \"integer\"}\r",
							"}\r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"let req = JSON.parse(request.data)\r",
							"let salary = parseInt(req.salary)\r",
							"\r",
							"pm.test(\"Salary start QA\", () => {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary)});\r",
							"\r",
							"pm.test(\"Salary after 6 months\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary * 2)});\r",
							"\r",
							"pm.test(\"Salary after 12 months\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary * 2.9)});\r",
							"\r",
							"pm.test(\"Salary after 1,5 year\", () => {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary * 4)});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"28\",\r\n    \"salary\": \"100\",\r\n    \"name\": \"maks\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					],
					"query": [
						{
							"key": "age",
							"value": "28",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "500",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Maksim",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"let shema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"name\", \"salary\"],\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"array\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(shema);\r",
							"})\r",
							"\r",
							"let req = request.data;\r",
							"let salary = parseInt(req.salary)\r",
							"\r",
							"pm.test (\"salary 100[0]\", () => {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary)});\r",
							"\r",
							"pm.test (\"salary_200[1]\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(salary * 2)});\r",
							"\r",
							"pm.test (\"salary_300[2]\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(salary * 3)});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maksim",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok, response is json\", function (){\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Daily_food\", function (){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.daily_food).to.eql(1.2);\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep\", function (){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "100",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maks",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"family\", \"name\", \"salary\"],\r",
							"    \"properties\":{\r",
							"        \"age\": {\"type\": \"string\"},\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\"children\", \"u_salary_1_5_year\"],\r",
							"            \"properties\": {\r",
							"                \"children\": {\"type\": \"array\"},\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"            }\r",
							"        },\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"integer\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"pm.test(\"Value name = value from variable\", () => {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"})\r",
							"\r",
							"pm.test(\"Value age = age from variable\", () => {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maksim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"let randomNum = _.random (0,Object.keys(pm.response.json()).length);\r",
							"let currencyObj = jsonData[randomNum];\r",
							"\r",
							"pm.environment.set(\"currency\", parseInt(currencyObj.Cur_ID));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}